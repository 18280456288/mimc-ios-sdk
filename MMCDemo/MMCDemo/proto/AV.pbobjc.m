// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: a_v.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "AV.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - AVRoot

@implementation AVRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - AVRoot_FileDescriptor

static GPBFileDescriptor *AVRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - Enum MIMC_RTS_TYPE

GPBEnumDescriptor *MIMC_RTS_TYPE_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Audio\000Video\000";
    static const int32_t values[] = {
        MIMC_RTS_TYPE_Audio,
        MIMC_RTS_TYPE_Video,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(MIMC_RTS_TYPE)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:MIMC_RTS_TYPE_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL MIMC_RTS_TYPE_IsValidValue(int32_t value__) {
  switch (value__) {
    case MIMC_RTS_TYPE_Audio:
    case MIMC_RTS_TYPE_Video:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum MIMC_RTS_CODEC_TYPE

GPBEnumDescriptor *MIMC_RTS_CODEC_TYPE_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "OsCodec\000Ffmpeg\000Speex\000";
    static const int32_t values[] = {
        MIMC_RTS_CODEC_TYPE_OsCodec,
        MIMC_RTS_CODEC_TYPE_Ffmpeg,
        MIMC_RTS_CODEC_TYPE_Speex,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(MIMC_RTS_CODEC_TYPE)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:MIMC_RTS_CODEC_TYPE_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL MIMC_RTS_CODEC_TYPE_IsValidValue(int32_t value__) {
  switch (value__) {
    case MIMC_RTS_CODEC_TYPE_OsCodec:
    case MIMC_RTS_CODEC_TYPE_Ffmpeg:
    case MIMC_RTS_CODEC_TYPE_Speex:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - MIMCRtsPacket

@implementation MIMCRtsPacket

@dynamic hasType, type;
@dynamic hasCodecType, codecType;
@dynamic hasSequence, sequence;
@dynamic hasPayload, payload;

typedef struct MIMCRtsPacket__storage_ {
  uint32_t _has_storage_[1];
  MIMC_RTS_TYPE type;
  MIMC_RTS_CODEC_TYPE codecType;
  NSData *payload;
  uint64_t sequence;
} MIMCRtsPacket__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueEnum = MIMC_RTS_TYPE_Audio,
        .core.name = "type",
        .core.dataTypeSpecific.enumDescFunc = MIMC_RTS_TYPE_EnumDescriptor,
        .core.number = MIMCRtsPacket_FieldNumber_Type,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(MIMCRtsPacket__storage_, type),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueEnum = MIMC_RTS_CODEC_TYPE_OsCodec,
        .core.name = "codecType",
        .core.dataTypeSpecific.enumDescFunc = MIMC_RTS_CODEC_TYPE_EnumDescriptor,
        .core.number = MIMCRtsPacket_FieldNumber_CodecType,
        .core.hasIndex = 1,
        .core.offset = (uint32_t)offsetof(MIMCRtsPacket__storage_, codecType),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueUInt64 = 0ULL,
        .core.name = "sequence",
        .core.dataTypeSpecific.className = NULL,
        .core.number = MIMCRtsPacket_FieldNumber_Sequence,
        .core.hasIndex = 2,
        .core.offset = (uint32_t)offsetof(MIMCRtsPacket__storage_, sequence),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeUInt64,
      },
      {
        .defaultValue.valueData = nil,
        .core.name = "payload",
        .core.dataTypeSpecific.className = NULL,
        .core.number = MIMCRtsPacket_FieldNumber_Payload,
        .core.hasIndex = 3,
        .core.offset = (uint32_t)offsetof(MIMCRtsPacket__storage_, payload),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MIMCRtsPacket class]
                                     rootClass:[AVRoot class]
                                          file:AVRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(MIMCRtsPacket__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
